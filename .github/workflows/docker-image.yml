name: Docker Image CI
# Installs cosign
# Logs in to Docker Hub using GitHub secrets.
# Extracts metadata for better tagging
# Builds and pushes the container image to docker hub
# Uses anchore/sbom-action to generate an SBOM in SPDX format.
# Push SBOM to Docker Hub as an OCI Artifact
# Upload SBOM to GitHub Release
# Uploads the SBOM as an artifact to GitHub.
# Attaches the SBOM as a label to the Docker image in Docker Hub..
# Signs the resulting container image digest and the SBOM with cosign 

on:
  push:
    branches: [ "main" ]
    # Publish semrer tags as releases.
    tags: [ 'v*.*.*' ]
  pull_request:
    branches: [ "main" ]

permissions:
    contents: write
    packages: write
    id-token: write
    actions: write
    security-events: write

jobs:

  build-and-push:
    runs-on: ubuntu-latest
    

    steps:
    - name: Checkout the repository code
      uses: actions/checkout@v4

    # Install the cosign tool except on PR
    # https://github.com/sigstore/cosign-installer
    - name: Install cosign
      if: github.event_name != 'pull_request'
      uses: sigstore/cosign-installer@59acb6260d9c0ba8f4a2f9d9b48431a222b68e20 #v3.5.0
      with:
        cosign-release: 'v2.2.4'

    - name: Login to Docker Hub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}
      
    - name: Extract metadata for Docker image
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ secrets.DOCKERHUB_USERNAME }}/githubactions_cas2_2
          
    - name: Build and push the Docker image
      uses: docker/build-push-action@v4
      with:
        context: .
        push: true
        #tags:  dcompanyestall/githubactions_cas2_0:main
        tags: ${{ secrets.DOCKERHUB_USERNAME }}/githubactions_cas2_2:main
        labels: ${{ steps.meta.outputs.labels }}
        # Important: Add the load=true option to make the image available for subsequent steps
        load: true
        
    - name: Generate SBOM using Anchore SBOM Action
      uses: anchore/sbom-action@v0
      with:
        image: "${{ secrets.DOCKERHUB_USERNAME }}/githubactions_cas2_2:main"
        format: "spdx-json"
        output-file: "sbom.spdx.json"
    
    #- name: Install Syft for SBOM generation
    #  run: |
    #    curl -sSfL https://raw.githubusercontent.com/anchore/syft/main/install.sh | sh -s -- -b /usr/local/bin
    #    syft version

    #- name: Generate SBOM
    #  run: |
    #    syft ${{ secrets.DOCKERHUB_USERNAME }}/githubactions_cas2_0:v1 -o spdx-json > sbom.spdx.json

    - name: Upload SBOM as artifact
      uses: actions/upload-artifact@v4
      with:
        name: sbom-spdx-json
        path: sbom.spdx.json

    - name: Install ORAS for OCI Artifact Support
      run: |
        ORAS_VERSION=$(curl -s https://api.github.com/repos/oras-project/oras/releases/latest | jq -r '.tag_name' | sed 's/v//')
        curl -LO https://github.com/oras-project/oras/releases/download/v${ORAS_VERSION}/oras_${ORAS_VERSION}_linux_amd64.tar.gz
        tar -xvzf oras_${ORAS_VERSION}_linux_amd64.tar.gz
        chmod +x oras
        sudo mv oras /usr/local/bin/oras
        oras version

    - name: Push SBOM to Docker Hub as an OCI Artifact
      run: |
        export IMAGE_NAME="${{ secrets.DOCKERHUB_USERNAME }}/githubactions_cas2_2"
        export SBOM_FILE="sbom.spdx.json"

        # Authenticate with Docker Hub
        echo ${{ secrets.DOCKERHUB_TOKEN }} | oras login -u ${{ secrets.DOCKERHUB_USERNAME }} --password-stdin docker.io

        # Push SBOM to Docker Hub as an OCI Artifact
        oras push docker.io/$IMAGE_NAME:sbom \
          --artifact-type "application/vnd.syft+json" \
          $SBOM_FILE:application/vnd.syft+json

    - name: Upload SBOM to GitHub Release
      uses: softprops/action-gh-release@v1
      with:
        files: sbom.spdx.json
        tag_name: latest-sbom
        name: "SBOM for latest container image"
        body: "This is the SBOM for the latest Docker image."
        draft: false
        prerelease: false

    - name: Attach SBOM to Docker Image in Docker Hub
      run: |
        export IMAGE_NAME="${{ secrets.DOCKERHUB_USERNAME }}/githubactions_cas2_2:main"
        export SBOM_FILE="sbom.spdx.json"
          
        docker pull $IMAGE_NAME
        docker build --label "org.opencontainers.image.sbom=$SBOM_FILE" --tag $IMAGE_NAME .
        docker push $IMAGE_NAME
      
      #- name: Scan the image and upload dependency results
      #  uses: anchore/sbom-action@v0.18.0
      #  with:
      #    image: "dcompanyestall/githubactions_cas2_0:main"
      #    output-file: sbom-spdx-json
        #artifact-name: sbom-spdx-json
        #id: sbom-spdx-json
     #   dependency-snapshot: true
        #debug: true 
        #username: ${{ secrets.DOCKERHUB_USERNAME }}
        #password: ${{ secrets.DOCKERHUB_TOKEN }}
      #env:
      #  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    #- name: Debug SBOM file
     # run: |
     #   ls -l *spdx.json || echo "SBOM file not found!"

    #- name: Upload SBOM as artifact
    #  uses: actions/upload-artifact@v4 # Updated to v4
    #  with:
    #    name: sbom-spdx-json
    #    path: sbom.spdx.json

    # Example: Scan the image for vulnerabilities (optional)
    #- name: Trivy vulnerability scan
    #  run: |
    #    IMAGE_NAME=dcompanyestall/githubactions_cas2_0:main
    #    trivy image --format json --output vulnerability-report.json "$IMAGE_NAME"
      
    #- name: Upload Vulnerability Scan Report
    #  uses: actions/upload-artifact@v4
    #  with:
    #    name: vulnerability-report.json
    #    path: vulnerability-report.json 
  
